version: "3.8"

# Diamonds DevContainer Docker Compose Configuration
# Provides multi-service development environment

services:
  # Main DevContainer service
  devcontainer:
    build:
      context: ..
      dockerfile: .devcontainer/Dockerfile
      args:
        NODE_VERSION: 20
        PYTHON_VERSION: 3.11
        WORKSPACE_NAME: ${WORKSPACE_NAME}
    volumes:
      # Project source code
      - ..:/workspaces/${WORKSPACE_NAME}:cached

      # Cache volumes for performance
      - yarn-cache:/home/node/.yarn/cache
      - node-modules:/workspaces/${WORKSPACE_NAME}/node_modules
      - hardhat-artifacts:/workspaces/${WORKSPACE_NAME}/artifacts
      - hardhat-cache:/workspaces/${WORKSPACE_NAME}/cache
      - diamond-abi:/workspaces/${WORKSPACE_NAME}/diamond-abi
      - diamond-typechain:/workspaces/${WORKSPACE_NAME}/diamond-typechain-types
      - typechain-types:/workspaces/${WORKSPACE_NAME}/typechain-types
      - reports:/workspaces/${WORKSPACE_NAME}/reports

      # SSH and Git configuration
      - ~/.ssh:/home/node/.ssh:ro
      - ~/.gitconfig:/home/node/.gitconfig:ro

      # Environment file
      - ./.env:/workspaces/${WORKSPACE_NAME}/.env

    working_dir: /workspaces/${WORKSPACE_NAME}
    command: sleep infinity
    ports:
      - "8545:8545" # Hardhat Network
      - "8546:8546" # Additional Blockchain Node
      - "3000:3000" # Frontend Development
      - "5000:5000" # API/Backend
      - "8080:8080" # Documentation/Other
    environment:
      - NODE_ENV=development
      - HARDHAT_NETWORK=hardhat
      - CI_MODE=false
      - GAS_REPORTER_ENABLED=false
      - REPORT_GAS=false
    networks:
      - ${WORKSPACE_NAME}-network
    depends_on:
      - hardhat-node
    healthcheck:
      test: ["CMD", "node", "--version"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Local Hardhat Network Node
  hardhat-node:
    image: node:20-bookworm
    volumes:
      - ..:/workspaces/${WORKSPACE_NAME}:cached
      - node-modules:/workspaces/${WORKSPACE_NAME}/node_modules
    working_dir: /workspaces/${WORKSPACE_NAME}
    command: >
      bash -c "
        yarn install --frozen-lockfile --prefer-offline &&
        npx hardhat node --hostname 0.0.0.0 --port 8545
      "
    ports:
      - "8545:8545"
    environment:
      - NODE_ENV=development
    networks:
      - ${WORKSPACE_NAME}-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8545"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Ganache CLI (Alternative local blockchain)
  ganache-node:
    image: trufflesuite/ganache:latest
    command:
      - "--host=0.0.0.0"
      - "--port=8546"
      - "--networkId=1337"
      - "--deterministic"
      - "--db=/data/ganache-db"
    ports:
      - "8546:8546"
    volumes:
      - ganache-data:/data
    networks:
      - ${WORKSPACE_NAME}-network
    profiles:
      - ganache
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8546"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # IPFS Node (for decentralized storage)
  ipfs-node:
    image: ipfs/go-ipfs:latest
    ports:
      - "4001:4001" # Swarm
      - "5001:5001" # API
      - "8080:8080" # Gateway
    volumes:
      - ipfs-data:/data/ipfs
      - ipfs-exports:/export
    environment:
      - IPFS_PROFILE=server
    networks:
      - ${WORKSPACE_NAME}-network
    profiles:
      - ipfs
    healthcheck:
      test: ["CMD", "ipfs", "id"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # PostgreSQL Database (for off-chain data)
  postgres-db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=diamonds_project
      - POSTGRES_USER=diamonds
      - POSTGRES_PASSWORD=development_password
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/sql:/docker-entrypoint-initdb.d
    networks:
      - ${WORKSPACE_NAME}-network
    profiles:
      - database
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U diamonds -d diamonds_project"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Redis (for caching and sessions)
  redis-cache:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    networks:
      - ${WORKSPACE_NAME}-network
    profiles:
      - cache
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # The Graph Node (for indexing - advanced setup)
  graph-node:
    image: graphprotocol/graph-node:latest
    ports:
      - "8000:8000" # GraphQL HTTP
      - "8001:8001" # GraphQL WS
      - "8020:8020" # JSON-RPC
      - "8030:8030" # Index Node
      - "8040:8040" # Metrics
    depends_on:
      - postgres-db
      - ipfs-node
    environment:
      - postgres_host=postgres-db
      - postgres_port=5432
      - postgres_user=diamonds
      - postgres_pass=development_password
      - postgres_db=diamonds_project
      - ipfs_host=ipfs-node
      - ipfs_port=5001
      - ethereum_rpc_hardhat=http://hardhat-node:8545
    volumes:
      - graph-data:/var/lib/graph-data
    networks:
      - ${WORKSPACE_NAME}-network
    profiles:
      - graph
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8040/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

# Named volumes for persistence
volumes:
  yarn-cache:
  node-modules:
  hardhat-artifacts:
  hardhat-cache:
  diamond-abi:
  diamond-typechain:
  typechain-types:
  reports:
  ganache-data:
  ipfs-data:
  ipfs-exports:
  postgres-data:
  redis-data:
  graph-data:

# Networks
networks:
  ${WORKSPACE_NAME}-network:
    driver: bridge
